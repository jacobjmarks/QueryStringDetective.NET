@page "/"

@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Options
@using Microsoft.Extensions.Primitives
@using System.Text.Json.Nodes

@implements IDisposable

@inject AppConfig appConfig

<PageTitle>.NET QS</PageTitle>

<MudTextField T="string" Label="Query string" Class="my-6" Variant="Variant.Outlined" Adornment="Adornment.Start"
    AdornmentText="?q=" @bind-Value="CurrentInputValue" Immediate="true" TextChanged="InputOnChange"></MudTextField>

<MudTable Items="@bindingResults" Breakpoint="Breakpoint.None" Loading="@isLoading">
    <HeaderContent>
        <MudTh>Parameter Type</MudTh>
        <MudTh>Binding Result</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Parameter Type" Class="mono">@context.Key</MudTd>
        <MudTd DataLabel="Binding Result" Class="mono">@context.Value?.ToJsonString()</MudTd>
    </RowTemplate>
</MudTable>

@if (lastRequestedInputValue == null)
{
    <MudText Align="Align.Center" Class="pt-4">
        Get started by entering a query string above...
    </MudText>
}
else
{

}

@code {
    private string? CurrentInputValue { get; set; }

    private readonly HttpClient httpClient = new();
    private readonly TimeSpan minRequestInterval = TimeSpan.FromSeconds(1);
    private DateTime lastRequestAt = DateTime.MinValue;
    private string? lastRequestedInputValue;

    private bool isLoading = false;

    private JsonObject bindingResults = new();

    private async Task InputOnChange()
    {
        if (CurrentInputValue == null)
            return;

        isLoading = true;

        try
        {
            if (DateTime.Now - lastRequestAt < minRequestInterval)
            {
                if (CurrentInputValue != lastRequestedInputValue)
                {
                    await Task.Delay(50);
                    await InputOnChange();
                }

                return;
            }

            lastRequestAt = DateTime.Now;
            await GetBindingResultsAsync(CurrentInputValue);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GetBindingResultsAsync(string inputValue)
    {
        lastRequestedInputValue = inputValue;
        var qs = QueryString.Create("q", "?q=" + inputValue);
        using var response = await httpClient.GetAsync(appConfig.AzureFunctionUrl + qs);
        response.EnsureSuccessStatusCode();
        var responseContent = await response.Content.ReadAsStringAsync();
        bindingResults = JsonNode.Parse(responseContent)?.AsObject() ?? new();
    }

    public void Dispose()
    {
        httpClient.Dispose();
    }
}
