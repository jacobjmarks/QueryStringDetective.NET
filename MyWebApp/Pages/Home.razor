@page "/"

@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Options
@using Microsoft.Extensions.Primitives
@using System.Text.Json.Nodes

@implements IDisposable

@inject AppConfig appConfig

<PageTitle>Home</PageTitle>

<MudTextField T="string" Label="Query string" Class="my-6" Variant="Variant.Outlined" Adornment="Adornment.Start"
    AdornmentText="?q=" @bind-Value="CurrentInputValue" Immediate="true" TextChanged="InputOnChange"></MudTextField>

<MudText Typo="Typo.body1">
    <pre>@bindingResults</pre>
</MudText>

@code {
    private string? CurrentInputValue { get; set; }

    private readonly HttpClient httpClient = new();
    private readonly TimeSpan minRequestInterval = TimeSpan.FromSeconds(1);
    private DateTime lastRequestAt = DateTime.MinValue;
    private string? lastRequestedInputValue;

    private string? bindingResults;

    private async Task InputOnChange()
    {
        if (CurrentInputValue == null)
            return;

        if (DateTime.Now - lastRequestAt < minRequestInterval)
        {
            if (CurrentInputValue != lastRequestedInputValue)
            {
                await Task.Delay(50);
                await InputOnChange();
            }

            return;
        }

        lastRequestAt = DateTime.Now;
        await GetBindingResultsAsync(CurrentInputValue);
    }

    private async Task GetBindingResultsAsync(string inputValue)
    {
        lastRequestedInputValue = inputValue;
        var qs = QueryString.Create("q", "?q=" + inputValue);
        using var response = await httpClient.GetAsync(appConfig.AzureFunctionUrl + qs);
        response.EnsureSuccessStatusCode();
        var responseContent = await response.Content.ReadAsStringAsync();
        bindingResults = JsonNode.Parse(responseContent)?.ToJsonString(new() { WriteIndented = true });
    }

    public void Dispose()
    {
        httpClient.Dispose();
    }
}
