@page "/"

@using Microsoft.AspNetCore.Http
@using MySharedClassLib

@implements IDisposable

@inject AppConfig appConfig

<PageTitle>.NET Query String Detective</PageTitle>

<MudStack>
    <MudTextField T="string" spellcheck="false" Class="qs-input" Label="Query string" Placeholder="hello&q=world"
        Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentText="?q=" @bind-Value="CurrentInputValue"
        Immediate="true" TextChanged="InputOnChange">
    </MudTextField>

    <MudStack Row="true" Wrap="Wrap.Wrap" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pl-2">
        <MudText Typo="Typo.body2">
            Enter a query string above and see how its value is bound to various .NET types
        </MudText>
        <MudSwitch @bind-Value="@showErroneous" Color="Color.Primary">
            Show Erroneous
        </MudSwitch>
    </MudStack>

    <MudTable Items="@bindingResults" Dense="true" Breakpoint="Breakpoint.None" Loading="@isLoading"
        Filter="@(r => showErroneous ? true : !r.IsErroneous)">
        <HeaderContent>
            <MudTh>Parameter Type</MudTh>
            <MudTh>Binding Result</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Parameter Type">
                <MudText Class="mono">@context.Type</MudText>
            </MudTd>
            <MudTd DataLabel="Binding Result" Class="mono">
                @if (context.IsErroneous)
                {
                    <MudText Color="Color.Error" Class="mono" Typo="Typo.body2">
                        @context.Error.Message
                    </MudText>
                    <MudText Color="Color.Error" Typo="Typo.caption">
                        @context.Error.Detail
                    </MudText>
                }
                else
                {
                    <MudText Class="mono">@context.Result</MudText>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudStack>


@code {
    private string? CurrentInputValue { get; set; }

    private readonly HttpClient httpClient = new();
    private readonly TimeSpan minRequestInterval = TimeSpan.FromSeconds(1);
    private DateTime lastRequestAt = DateTime.MinValue;
    private string? lastRequestedInputValue;

    private bool isLoading = false;

    private IEnumerable<BindingResult> bindingResults = [];
    private bool showErroneous = true;

    private async Task InputOnChange()
    {
        if (CurrentInputValue == null)
            return;

        isLoading = true;

        try
        {
            if (DateTime.Now - lastRequestAt < minRequestInterval)
            {
                if (CurrentInputValue != lastRequestedInputValue)
                {
                    await Task.Delay(50);
                    await InputOnChange();
                }

                return;
            }

            lastRequestAt = DateTime.Now;
            await GetBindingResultsAsync(CurrentInputValue);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task GetBindingResultsAsync(string inputValue)
    {
        lastRequestedInputValue = inputValue;
        var qs = QueryString.Create("q", "?q=" + inputValue);
        using var response = await httpClient.GetAsync(appConfig.AzureFunctionUrl + qs);
        response.EnsureSuccessStatusCode();
        var results = await response.Content.ReadFromJsonAsync<IEnumerable<BindingResult>>() ?? [];
        bindingResults = results.OrderByDescending(r => !r.IsErroneous);
    }

    public void Dispose()
    {
        httpClient.Dispose();
    }
}
