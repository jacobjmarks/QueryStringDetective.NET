@page "/"

@using Shared

<PageTitle>.NET Query String Detective</PageTitle>

<MudStack>
    <MudTextField @ref="_input" T="string" spellcheck="false" Class="qs-input" Label="Query string"
        Placeholder="q=hello&q=world" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentText="?"
        HelperText="The server will bind the `q` parameter." HelperTextOnFocus="true" MaxLength="1000"
        OnKeyDown="InputOnKeyDown" TextChanged="InputOnChange" Immediate="true" />

    <MudStack Row="true" Wrap="Wrap.Wrap" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pl-2">
        <MudText Typo="Typo.body2">
            Enter a query string above and see how its value is bound to various .NET types
        </MudText>
        <MudStack Row="true" Class="flex-grow-1" Justify="Justify.FlexEnd">
            <MudButton Variant="Variant.Text" Disabled="@(!bindingResults.Any())" Size="Size.Small"
                Color="Color.Primary" StartIcon="@Icons.Material.Filled.Share" OnClick="GetSharableLink">
                Copy link
            </MudButton>
            <MudButton Variant="Variant.Text" Disabled="@(!bindingResults.Any())" Size="Size.Small"
                Color="Color.Primary" StartIcon="@Icons.Material.Filled.Clear" OnClick="Clear">
                Clear results
            </MudButton>
        </MudStack>
    </MudStack>

    <MudExpansionPanels>
        <MudExpansionPanel>
            <TitleContent>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0">
                    <MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-3" Size="Size.Small"></MudIcon>
                    <MudText>Configuration</MudText>
                </MudStack>
            </TitleContent>
            <ChildContent>
                <MudStack>
                    <MudSelect Label="Show nullable types" @bind-Value="showNullableTypes" Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Always")" />
                        <MudSelectItem Value="@("When Discrepant")" />
                        <MudSelectItem Value="@("Never")" />
                    </MudSelect>

                    <MudDivider />

                    <MudSwitch @bind-Value="@showErroneous" Color="Color.Primary">
                        Show erroneous bindings
                        <MudText Typo="Typo.caption" Class="d-block mud-text-secondary">
                            Errors will always be shown if results are discrepant between API types
                        </MudText>
                    </MudSwitch>
                    <MudSwitch @bind-Value="@showDetailedErrorMessages" Color="Color.Primary">
                        Show detailed error messages
                    </MudSwitch>
                </MudStack>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudTable Items="@bindingResults" Dense="true" Breakpoint="Breakpoint.None" Loading="@loadingIndicator"
        Filter="ResultTableFilter">
        <HeaderContent>
            <MudTh>Parameter Type</MudTh>
            <MudTh>Binding Result</MudTh>
        </HeaderContent>
        <NoRecordsContent>
            <MudText Typo="Typo.body2" Class="mud-text-secondary mx-5" Align="Align.Left">
                No results
            </MudText>
        </NoRecordsContent>
        <RowTemplate>
            <MudTd DataLabel="Parameter Type">
                <MudText Class="mono">@context.Type</MudText>
            </MudTd>
            <MudTd DataLabel="Binding Result" Class="mono">
                @if (context.IsDiscrepant
                && (!context.AllErroneous || context.Results.Values.DistinctBy(GetErrorText).Count() > 1))
                {
                    foreach (var ((apiType, result), i) in context.Results.Select((r, i) => (r, i)))
                    {
                        <MudText Typo="Typo.caption">
                            @apiType.ToDisplayString()
                        </MudText>

                        RenderBindingResult(result);

                        if (i != context.Results.Count - 1)
                        {
                            <MudDivider Class="my-1" />
                        }
                    }
                }
                else
                {
                    var result = context.Results.First().Value;
                    RenderBindingResult(result);
                }

                @{
                    void RenderBindingResult(BindingResult result)
                    {
                        if (result.IsErroneous)
                        {
                            <MudText Color="Color.Error" Class="mono" Typo="Typo.body2">
                                @GetErrorText(result)
                            </MudText>
                        }
                        else
                        {
                            <MudText Class="mono">@result.Result</MudText>
                        }
                    }

                    string? GetErrorText(BindingResult result) => result.Error?.ToDisplayString(showDetailedErrorMessages);
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
    @{
        int? erroneousCount = null;
        if (!showErroneous && (erroneousCount = bindingResults.Count(r => r.AllErroneous)) > 0)
        {
            <MudStack Row="true" AlignItems="AlignItems.Center" Class="pl-2">
                <MudText Typo="Typo.body2">
                    @(erroneousCount) other types could not be bound.
                    <MudText Class="d-inline cursor-pointer" Typo="Typo.inherit" Color="Color.Primary"
                        @onclick="() => showErroneous = true">
                        Show them
                    </MudText>
                </MudText>
            </MudStack>
        }
    }
</MudStack>
